from Person import Person
from ButtonsAndTexts import Texts
from ButtonsAndTexts import Buttons as Btn
import telebot
from telebot import types
import requests
import mylogger
import os
from dotenv import load_dotenv

load_dotenv()
bot_token = os.getenv("bot_token")
bot = telebot.TeleBot(bot_token)
api_key = os.getenv("chat_token")
user_data = {}
mylogger.logfile_define()

def get_user_data(chat_id):
    if chat_id not in user_data:
        user_data[chat_id] = Person("None", 0, "None", "None", "None", "None", "None")
    return user_data[chat_id]

def get_congratulation(prompt):
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "mistral/ministral-8b",
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 256,
    }
    response = requests.post("https://openrouter.ai/api/v1/chat/completions", json=data, headers=headers)
    try:
        response.raise_for_status()
        result = response.json()
        if "choices" in result:
            return result["choices"][0]["message"]["content"]
        elif "error" in result:
            return f"–û—à–∏–±–∫–∞: {result['error']['message']}"
        else:
            return "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å'))
    markup.add(types.KeyboardButton('–û –Ω–∞—Å'))
    markup.add(types.KeyboardButton('–ü–æ–º–æ—â—å'))
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–πüéâ\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å'",
                     reply_markup=markup)

def on_click(message):
    if message.text == '–°–æ–∑–¥–∞—Ç—å':
        get_create(message)
    elif message.text == '–û –Ω–∞—Å':
        get_about(message)
    elif message.text == '–ü–æ–º–æ—â—å':
        get_help(message)

@bot.message_handler(commands=['help'])
def get_help(message):
    bot.send_message(message.chat.id, Texts.helpText)

@bot.message_handler(commands=['about'])
def get_about(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ú–æ–µ CV:', url=Texts.cvURL))
    bot.send_message(message.chat.id, Texts.aboutText, reply_markup=markup)

@bot.message_handler(commands=['create'])
def get_create(message):
    person = get_user_data(message.chat.id)
    markup = types.InlineKeyboardMarkup()
    markup.row(*Btn.sexButtons)
    bot.send_message(message.chat.id,
                     '''\t–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ!\n–ö–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ?''',
                     reply_markup=markup)

def process_command_during_input(message):
    if message.text == '/start':
        start(message)
    elif message.text == '/help':
        get_help(message)
    elif message.text == '/about':
        get_about(message)
    elif message.text == '/create':
        get_create(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    person = get_user_data(callback.message.chat.id)

    # –∑–∞–ø–∏—Å—å –ø–æ–ª–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    if callback.data == 'get_create_f':
        person.sex = '–∂–µ–Ω—â–∏–Ω–∞'
        bot.send_message(callback.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –∑–æ–≤—É—Ç –Ω–∞—à–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è?")
        bot.register_next_step_handler_by_chat_id(callback.message.chat.id, lambda m: get_name(m, person))

    elif callback.data == 'get_create_m':
        person.sex = '–º—É–∂—á–∏–Ω–∞'
        bot.send_message(callback.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –∑–æ–≤—É—Ç –Ω–∞—à–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è?")
        bot.register_next_step_handler_by_chat_id(callback.message.chat.id, lambda m: get_name(m, person))

    # –∑–∞–ø–∏—Å—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    elif callback.data.startswith('holiday_'):
        if callback.data == 'holiday_pozh':
            person.holiday = '–ø—Ä–æ—Å—Ç–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ'
        elif callback.data == 'holiday_hb':
            person.holiday = '–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è'
        elif callback.data == 'holiday_ny':
            person.holiday = '–ù–æ–≤—ã–π –ì–æ–¥'
        elif callback.data == 'holiday_23':
            person.holiday = '23 —Ñ–µ–≤—Ä–∞–ª—è'
        elif callback.data == 'holiday_8':
            person.holiday = '8 –º–∞—Ä—Ç–∞'
        elif callback.data == 'holiday_etc':
            bot.send_message(callback.message.chat.id, "–¢–∞–∫... –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞")
            bot.register_next_step_handler_by_chat_id(callback.message.chat.id, lambda m: get_holiday_etc(m, person))
            return

        markup = types.InlineKeyboardMarkup()
        markup.add(*Btn.styleButtons, row_width=1)
        bot.send_message(callback.message.chat.id, "‚ú® –°—É–ø–µ—Ä! –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

    # –∑–∞–ø–∏—Å—å —Å—Ç–∏–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    elif callback.data.startswith('style_'):
        if callback.data == 'style_of':
            person.style = '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π'
        elif callback.data == 'style_dr':
            person.style = '–¥—Ä—É–∂–µ—Å–∫–∏–π'
        elif callback.data == 'style_ro':
            person.style = '—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'

        markup = types.InlineKeyboardMarkup()
        markup.add(*Btn.lengthButtons, row_width=1)
        bot.send_message(callback.message.chat.id, "üí´ –ö–ª–∞—Å—Å! –í—ã–±–µ—Ä–∏ –¥–ª–∏–Ω—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

    elif callback.data.startswith('len_'):
        if callback.data == 'len_s':
            person.text_length = '–∫–æ—Ä–æ—Ç–∫–æ–µ, –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
        elif callback.data == 'len_m':
            person.text_length = '—Å—Ä–µ–¥–Ω–µ–µ, –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
        elif callback.data == 'len_l':
            person.text_length = '–¥–ª–∏–Ω–Ω–æ–µ'
        create_exit(callback.message, person)

    elif callback.data == 'exit_y':
        bot.send_message(callback.message.chat.id, f"–ì–æ—Ç–æ–≤–∏–º —Ç–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ...‚è≥")
        mylogger.log_to_csv(person.name, person.age, person.sex, person.holiday, person.style, person.text_length)
        generate_congratulation(callback, person)

    elif callback.data == 'exit_n':
        bot.send_message(callback.message.chat.id, f"–û–π... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å'")

    elif callback.data == 'generation':
        generate_congratulation(callback, person)

def get_name(message, person):
    if message.text.startswith('/'):
        process_command_during_input(message)
        return
    else:
        person.name = message.text
        if person.sex == "–∂–µ–Ω—â–∏–Ω–∞":
            bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ!üòÅ –°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç? –ù–∞–ø–∏—à–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º!')
        else:
            bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ!üòÅ –°–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç? –ù–∞–ø–∏—à–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º!')
        bot.register_next_step_handler_by_chat_id(message.chat.id, lambda m: get_age(m, person))

def get_age(message, person):
    if message.text.startswith('/'):
        process_command_during_input(message)
        return
    else:
        person.age = message.text
        if person.age.isdigit():
            if 0 < int(person.age) < 120:
                markup = types.InlineKeyboardMarkup()
                markup.add(*Btn.holidayButtons, row_width=1)
                bot.send_message(message.chat.id, f'–ê —Å –∫–∞–∫–∏–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å?', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, f'–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º')
                bot.register_next_step_handler_by_chat_id(message.chat.id, lambda m: get_age(m, person))
        else:
            bot.send_message(message.chat.id, f'–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º')
            bot.register_next_step_handler_by_chat_id(message.chat.id, lambda m: get_age(m, person))

def get_holiday_etc(message, person):
    if message.text.startswith('/'):
        process_command_during_input(message)
        return
    else:
        person.holiday = message.text
        markup = types.InlineKeyboardMarkup()
        markup.add(*Btn.styleButtons, row_width=1)
        bot.send_message(message.chat.id, "‚ú® –°—É–ø–µ—Ä! –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

def create_exit(message, person):
    markup = types.InlineKeyboardMarkup()
    markup.row(*Btn.ynButtons)
    bot.send_message(message.chat.id,
                     f"–°—É–ø–µ—Ä! –í—Å–µ –≥–æ—Ç–æ–≤–æ) –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ!\n\n–ù–∞—à –ø–æ–ª—É—á–∞—Ç–µ–ª—å: \n–∏–º—è: {person.name} \n–ø–æ–ª: {person.sex} \n–≤–æ–∑—Ä–∞—Å—Ç: {person.age} \n–ø—Ä–∞–∑–¥–Ω–∏–∫: {person.holiday} \n—Å—Ç–∏–ª—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {person.style} \n–¥–ª–∏–Ω–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {person.text_length} \n\n–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=markup)

def generate_congratulation(callback, person):
    prompt = f"–ù–∞–ø–∏—à–∏ {person.text_length} –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ c –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º \"{person.holiday}\" –¥–ª—è {'–∂–µ–Ω—â–∏–Ω—ã' if person.sex == '–∂–µ–Ω—â–∏–Ω–∞' else '–º—É–∂—á–∏–Ω—ã'}, –ø–æ –∏–º–µ–Ω–∏ {person.name}, –≤–æ–∑—Ä–∞—Å—Ç: {person.age}, –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ {person.style} —Å—Ç–∏–ª–µ."
    markup = types.InlineKeyboardMarkup()
    new_generation_btn = types.InlineKeyboardButton('–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—åüîÑÔ∏è', callback_data='generation')
    markup.add(new_generation_btn)

    congrat_text = get_congratulation(prompt)
    bot.send_message(callback.message.chat.id, f"{congrat_text}", reply_markup=markup)


@bot.message_handler()
def info(message):
    on_click(message)

bot.polling(none_stop=True, interval=0)  # –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å